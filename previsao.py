import streamlit as st
import numpy as np
import plotly.graph_objects as go
from datetime import timedelta
from utils import obter_dados_brent, treinar_modelo_lstm, gerar_previsao

def exibir_previsao():
    st.title("üìà Previs√£o do Pre√ßo do Brent com LSTM")

    # Obter dados hist√≥ricos do Brent
    df = obter_dados_brent()
    data_max = df["Date"].max()  # √öltima data dispon√≠vel no dataframe

    # Adicionando o campo para o n√∫mero de dias de previs√£o
    num_dias = st.number_input(
        "Quantos dias deseja prever?",
        min_value=1,
        max_value=365,  # Limite m√°ximo de dias
        value=30,  # Valor padr√£o
        step=1
    )

    # Adicionando o bot√£o para gerar a previs√£o
    if st.button("Gerar Previs√£o"):
        st.write("üîÑ Calculando previs√£o...")

        # Treinamento do modelo e gera√ß√£o da previs√£o com base no n√∫mero de dias
        modelo, scaler = treinar_modelo_lstm(df)
        df_previsao = gerar_previsao(modelo, scaler, df, num_dias)

        # Criando o gr√°fico de previs√µes
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df["Date"], y=df["Close"], mode='lines', name='Pre√ßo Hist√≥rico', line=dict(color='#6baed6')))
        fig.add_trace(go.Scatter(x=df_previsao["Data"], y=df_previsao["Pre√ßo Previsto"], mode='lines', name='Pre√ßo Previsto', line=dict(color='#ff7f0e', dash='dot')))

        fig.update_layout(title="Previs√£o do Pre√ßo do Brent", xaxis_title="Data", yaxis_title="Pre√ßo (USD)", template="plotly_dark")

        # Exibindo o gr√°fico no Streamlit
        st.plotly_chart(fig)

        # Exibindo a tabela com os dados da previs√£o
        st.subheader("üìã Dados da Previs√£o")
        st.dataframe(df_previsao)
    else:
        st.write("‚è≥ Clique no bot√£o para gerar a previs√£o.")
